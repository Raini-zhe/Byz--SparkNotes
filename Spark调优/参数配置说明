
查看CPU:
	[root@node1 ~]# grep 'core id' /proc/cpuinfo | sort -u | wc -l
	6
	[root@node1 ~]# grep 'physical id' /proc/cpuinfo | sort -u | wc -l
	2
	(2+6=8)


spark参数调优
摘要
	--num-executors 9
	--executor-memory 5g
	--executor-cores 2
	--driver-memory 1g
	--total-executor-cores 24
	--conf "spark.default.parallelism=200" 设置该参数为num-executors * executor-cores的2~3倍较为合适
	--conf "spark.storage.memoryFraction=0.6" 作业中shuffle操作比较多，而持久化操作比较少，或者发现作业由于频繁的gc导致运行缓慢，意味着task执行用户代码的内存不够用，那么这个参数的值适当降低一些比较合适。
	--conf "spark.shuffle.memoryFraction=0.2" 调整Spill的频率和GC的行为,默认0.2,持久化少的情况,可适当增加该值
	　　9.资源参数参考示例
内容

1.num-executors
	参数说明：该参数用于设置Spark作业总共要用多少个Executor进程来执行。Driver在向YARN集群管理器申请资源时，YARN集群管理器会尽可能按照你的设置来在集群的各个工作节点上，启动相应数量的Executor进程。
		这个参数非常之重要，如果不设置的话，默认只会给你启动少量的Executor进程，此时你的Spark作业的运行速度是非常慢的。
	参数调优建议：每个Spark作业的运行一般设置50~100个左右的Executor进程比较合适，设置太少或太多的Executor进程都不好。设置的太少，无法充分利用集群资源；设置的太多的话，大部分队列可能无法给予充分的资源。

2.executor-memory
	参数说明：该参数用于设置每个Executor进程的内存。Executor内存的大小，很多时候直接决定了Spark作业的性能，而且跟常见的JVM OOM异常，也有直接的关联。
	参数调优建议：每个Executor进程的内存设置4G~8G较为合适。但是这只是一个参考值，具体的设置还是得根据不同部门的资源队列来定。
		可以看看自己团队的资源队列的最大内存限制是多少，num-executors乘以executor-memory，是不能超过队列的最大内存量的。
		此外，如果你是跟团队里其他人共享这个资源队列，那么申请的内存量最好不要超过资源队列最大总内存的1/3~1/2，避免你自己的Spark作业占用了队列所有的资源，导致别的同学的作业无法运行。

3.executor-cores
	参数说明：该参数用于设置每个Executor进程的CPU core数量。这个参数决定了每个Executor进程并行执行task线程的能力。
		因为每个CPU core同一时间只能执行一个task线程，因此每个Executor进程的CPU core数量越多，越能够快速地执行完分配给自己的所有task线程。
	参数调优建议：Executor的CPU core数量设置为2~4个较为合适。同样得根据不同部门的资源队列来定，可以看看自己的资源队列的最大CPU core限制是多少，
		再依据设置的Executor数量，来决定每个Executor进程可以分配到几个CPU core。同样建议，如果是跟他人共享这个队列，
		那么num-executors * executor-cores不要超过队列总CPU core的1/3~1/2左右比较合适，也是避免影响其他同学的作业运行。

4.driver-memory
	参数说明：该参数用于设置Driver进程的内存。
	参数调优建议：Driver的内存通常来说不设置，或者设置1G左右应该就够了。
		唯一需要注意的一点是，如果需要使用collect算子将RDD的数据全部拉取到Driver上进行处理，那么必须确保Driver的内存足够大，否则会出现OOM内存溢出的问题。


5.spark.default.parallelism
	参数说明：该参数用于设置每个stage的默认task数量。这个参数极为重要，如果不设置可能会直接影响你的Spark作业性能。
	参数调优建议：Spark作业的默认task数量为500~1000个较为合适。很多同学常犯的一个错误就是不去设置这个参数，那么此时就会导致Spark自己根据底层HDFS的block数量来设置task的数量，默认是一个HDFS block对应一个task。通常来说，Spark默认设置的数量是偏少的（比如就几十个task），如果task数量偏少的话，就会导致你前面设置好的Executor的参数都前功尽弃。试想一下，无论你的Executor进程有多少个，内存和CPU有多大，但是task只有1个或者10个，那么90%的Executor进程可能根本就没有task执行，也就是白白浪费了资源！因此Spark官网建议的设置原则是，设置该参数为num-executors * executor-cores的2~3倍较为合适，比如Executor的总CPU core数量为300个，那么设置1000个task是可以的，此时可以充分地利用Spark集群的资源。


6.spark.storage.memoryFraction
	参数说明：该参数用于设置RDD持久化数据在Executor内存中能占的比例，默认是0.6。也就是说，默认Executor 60%的内存，可以用来保存持久化的RDD数据。根据你选择的不同的持久化策略，如果内存不够时，可能数据就不会持久化，或者数据会写入磁盘。
	参数调优建议：如果Spark作业中，有较多的RDD持久化操作，该参数的值可以适当提高一些，保证持久化的数据能够容纳在内存中。避免内存不够缓存所有的数据，导致数据只能写入磁盘中，降低了性能。但是如果Spark作业中的shuffle类操作比较多，而持久化操作比较少，那么这个参数的值适当降低一些比较合适。此外，如果发现作业由于频繁的gc导致运行缓慢（通过spark web ui可以观察到作业的gc耗时），意味着task执行用户代码的内存不够用，那么同样建议调低这个参数的值。


7.spark.shuffle.memoryFraction
	参数说明：该参数用于设置shuffle过程中一个task拉取到上个stage的task的输出后，进行聚合操作时能够使用的Executor内存的比例，默认是0.2。也就是说，Executor默认只有20%的内存用来进行该操作。shuffle操作在进行聚合时，如果发现使用的内存超出了这个20%的限制，那么多余的数据就会溢写到磁盘文件中去，此时就会极大地降低性能。
	参数调优建议：如果Spark作业中的RDD持久化操作较少，shuffle操作较多时，建议降低持久化操作的内存占比，提高shuffle操作的内存占比比例，避免shuffle过程中数据过多时内存不够用，必须溢写到磁盘上，降低了性能。此外，如果发现作业由于频繁的gc导致运行缓慢，意味着task执行用户代码的内存不够用，那么同样建议调高这个参数的值。


8.total-executor-cores
	参数说明：Total cores for all executors.


9.资源参数参考示例
	以下是一份spark-submit命令的示例：

	./bin/spark-submit \
	  --master spark://192.168.1.1:7077 \
	  --num-executors 100 \
	  --executor-memory 6G \
	  --executor-cores 4 \
	　 --total-executor-cores 400 \ ##standalone default all cores 
	  --driver-memory 1G \
	  --conf spark.default.parallelism=1000 \
	  --conf spark.storage.memoryFraction=0.5 \
	  --conf spark.shuffle.memoryFraction=0.3 \























---------------(总内存 = SPARK_EXECUTOR_INSTANCES * SPARK_EXECUTOR_MEMORY + SPARK_DRIVER_MEMORY)----------



Spark参数配置说明
1  修改$SPARK_HOME/conf目录下的spark-defaults.conf文件

添加以下配置项

	spark.sql.hive.convertMetastoreParquet       false

	hive.exec.compress.output     false

	如果spark.sql.hive.convertMetastoreParquet不设置为false，前台清单预览看到的内容为乱码。

	由于parquet格式的文件内置了压缩，故输出结果不需要进行压缩，如果设置为压缩，清单下载功能异常。

2 修改$SPARK_HOME/conf目录下spark-env.sh文件，设置以下参数：

	SPARK_EXECUTOR_INSTANCES=11
	SPARK_EXECUTOR_CORES=2
	SPARK_EXECUTOR_MEMORY=1G
	SPARK_DRIVER_MEMORY=3G
	根据需要配置，如果设置刚好满足所有内存，则没有多余的内存供其他task任务的执行

2.1 参数SPARK_EXECUTOR_INSTANCES

	该参数决定了yarn集群中，最多能够同时启动的EXECUTOR的实例个数。Yarn中实际能够启动的最大Executors的数量会小于等于该值。如果不能确定最大能够启动的Executors数量，建议将该值先设置的足够大。（就是设置尽量大）

2.2 SPARK_EXECUTOR_CORES  该参数为设置每个EXECUTOR能够使用的CPU core的数量。

	Yarn集群能够最多并行的Task数据为SPARK_EXECUTOR_INSTANCES乘        以SPARK_EXECUTOR_CORES一般设置为2
	也就是说如果spark_executor_instances=11 则最多并行的Task数为22

2.3 SPARK_EXECUTOR_MEMORY

	该参数设置的是每个EXECUTOR分配的内存的数量。需要注意的是，该内存数量是SPARK_EXECUTOR_CORES中设置的内核数共用的内存数量。
	例如上面示例中，就是2核cpu公用1G内存。

2.4 SPARK_DRIVER_MEMORY

	该参数设置的是DRIVER分配的内存的大小。也就是执行start-thriftserver.sh机器上分配给thriftserver的内存大小。
 

3 yarn.nodemanager.resource.memory-mb

	$HADOOP_HOME/etc/hadoop目录下的yarn-site.xml文件中，参数yarn.nodemanager.resource.memory-mb配置了每台机器yarn能够使用的物理内存大小，单位是MB。
	如果发现集群内内存使用量明显比屋里内存小，可以修改该参数

4 spark.yarn.executor.memoryOverhead

	该参数指定了每个executor在分配的内存之外，能够额外获得的内存的大小，默认是7%







---------------(实验及如何设置资源分配：----------https://blog.csdn.net/fansy1990/article/details/54314249
问题解答：
那么，回到最开始的问题，6个节点（NodeManager），每个64G内存，16核如果要使用尽可能多的集群资源，怎么分配：
	1. 首先，去掉节点系统使用1G内存1核cpu，那么还剩63G内存，15核cpu；
	2. 加入executor-cpus设置为5，也就是建议值的最大，那么每个节点可以分配3个Container ，即 15 /5= 3 个Executor；
	3. 哪每个executor内存呢？ 63/3 = 21G 内存，21G - max(384 ,0.1 *21G) = 18.9G ； 那么executor-memory应该设置为多少呢？这个值应该是18.5G，为什么是这个呢？
		a. 第一，这个值需要是512M的倍数；
		b，第二，xG + max（384m，0.1 * xG） < 21 G， 这个x 最大就是18.5G；
		(说道这里，需要说明一点，在参考的链接中参数0.1不是0.1，而是0.07，所以算的的executor-memory是19G，这个需要注意；
	4. 那有多少个executor呢？ 有人说这还不好算：6个节点 ，每个节点3executor，所以一共是18个；这个不对；
	因为需要有一个container来部署ApplicationMaster，所以有个节点其资源就会减少，这也就是说在ApplicationMaster所在的节点上最多只能有2个executor，所以最终的参数是：

	--num-executors 17 --executor-cores 5 --executor-memory 18944m  
	因为这个参数不能识别小数点，所以不能写成18.5G（注意这个值和原文中是不一样的，如果0.1参数在CDH集群中的默认值是0.07，那么就是原文的答案）；



























