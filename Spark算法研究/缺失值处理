
我们可以使用Java Double类的isNaN函数手动过滤:
    import java.lang.Double.isNaN
    scala> parsed.map(md => md.scores(0)).filter(!isNaN(_)).stats()

只要愿意，可以使用这种方式得到scoers数组值的所有统计信息。用Scala的Range结构创建一个循环，遍历每个下标并计算该列的统计信息：
    val stats = (0 until 9).map(i => {parsed.map(md => md.scores(i)).filter(!isNaN(_)).stats()})


=====================================

做监督学习算法，训练数据集中的部分数据缺失，怎么预处理这些数据能够使得训练的结果不受影响，或是影响最小？

目前有三类处理方法:
1. 用平均值、中值、分位数、众数、随机值等替代。效果一般,因为等于人为增加了噪声。
2. 用其他变量做预测模型来算出缺失变量。效果比方法1略好。有一个根本缺陷，如果其他变量和缺失变量无关，则预测的结果无意义。如果预测结果相当准确，则又说明这个变量是没必要加入建模的。一般情况下，介于两者之间。
3. 最精确的做法，把变量映射到高维空间。比如性别，有男、女、缺失三种情况，则映射成3个变量：是否男、是否女、是否缺失。连续型变量也可以这样处理。比如Google、则映射成3个变量：是否男、是否女、是否缺失。连续型变量也可以这样处理。比如Google、缺点是计算量大大提升。而且只有在样本量非常大的时候效果才好，否则会因为过于稀疏，效果很差。


Spark ML 数据预处理问题集合 （ http://www.tuicool.com/articles/EFFJ3e ）
